From 7422f21865321a178f058bc542a1fc3b858ded2a Mon Sep 17 00:00:00 2001
From: ouni666 <fangwenbin@vip.qq.com>
Date: Sun, 28 Sep 2025 19:40:16 +0800
Subject: [PATCH] let sunshine use boost 1_8_3

---
 cmake/dependencies/Boost_Sunshine.cmake      |  4 ++--
 src/platform/common.h                        |  6 +++---
 src/platform/linux/misc.cpp                  |  4 ++--
 src/platform/macos/misc.mm                   |  4 ++--
 src/platform/windows/display_base.cpp        |  4 ++--
 src/platform/windows/misc.cpp                |  4 ++--
 src/process.cpp                              | 12 ++++++------
 src/process.h                                | 12 ++++++------
 src/system_tray.cpp                          |  2 +-
 tests/integration/test_external_commands.cpp |  2 +-
 10 files changed, 27 insertions(+), 27 deletions(-)

diff --git a/cmake/dependencies/Boost_Sunshine.cmake b/cmake/dependencies/Boost_Sunshine.cmake
index eb2ac409..b1931ec3 100644
--- a/cmake/dependencies/Boost_Sunshine.cmake
+++ b/cmake/dependencies/Boost_Sunshine.cmake
@@ -3,7 +3,7 @@
 #
 include_guard(GLOBAL)

-set(BOOST_VERSION "1.87.0")
+set(BOOST_VERSION "1.83")
 set(BOOST_COMPONENTS
         filesystem
         locale
@@ -30,7 +30,7 @@ endif()
 if (CMAKE_VERSION VERSION_GREATER_EQUAL "3.30")
     cmake_policy(SET CMP0167 NEW)  # Get BoostConfig.cmake from upstream
 endif()
-find_package(Boost CONFIG ${BOOST_VERSION} EXACT COMPONENTS ${BOOST_COMPONENTS})
+find_package(Boost CONFIG ${BOOST_VERSION} COMPONENTS ${BOOST_COMPONENTS})
 if(NOT Boost_FOUND)
     message(STATUS "Boost v${BOOST_VERSION} package not found in the system. Falling back to FetchContent.")
     include(FetchContent)
diff --git a/src/platform/common.h b/src/platform/common.h
index 28704bb1..96a57ea4 100644
--- a/src/platform/common.h
+++ b/src/platform/common.h
@@ -52,13 +52,13 @@ namespace boost {
     class path;
   }

-  namespace process::inline v1 {
+  namespace process::inline {
     class child;
     class group;
     template<typename Char>
     class basic_environment;
     typedef basic_environment<char> environment;
-  }  // namespace process::inline v1
+  }  // namespace process::inline
 }  // namespace boost
 #endif
 namespace video {
@@ -600,7 +600,7 @@ namespace platf {
    */
   bool needs_encoder_reenumeration();

-  boost::process::v1::child run_command(bool elevated, bool interactive, const std::string &cmd, boost::filesystem::path &working_dir, const boost::process::v1::environment &env, FILE *file, std::error_code &ec, boost::process::v1::group *group);
+  boost::process::child run_command(bool elevated, bool interactive, const std::string &cmd, boost::filesystem::path &working_dir, const boost::process::environment &env, FILE *file, std::error_code &ec, boost::process::group *group);

   enum class thread_priority_e : int {
     low,  ///< Low priority
diff --git a/src/platform/linux/misc.cpp b/src/platform/linux/misc.cpp
index 9da87337..50a5952f 100644
--- a/src/platform/linux/misc.cpp
+++ b/src/platform/linux/misc.cpp
@@ -22,7 +22,7 @@
 // lib includes
 #include <boost/asio/ip/address.hpp>
 #include <boost/asio/ip/host_name.hpp>
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>
 #include <fcntl.h>
 #include <unistd.h>

@@ -259,7 +259,7 @@ namespace platf {
     auto working_dir = boost::filesystem::path(std::getenv("HOME"));
     std::string cmd = R"(xdg-open ")" + url + R"(")";

-    boost::process::v1::environment _env = boost::this_process::environment();
+    boost::process::environment _env = boost::this_process::environment();
     std::error_code ec;
     auto child = run_command(false, false, cmd, working_dir, _env, nullptr, ec, nullptr);
     if (ec) {
diff --git a/src/platform/macos/misc.mm b/src/platform/macos/misc.mm
index 540dd74f..560a4045 100644
--- a/src/platform/macos/misc.mm
+++ b/src/platform/macos/misc.mm
@@ -23,7 +23,7 @@
 // lib includes
 #include <boost/asio/ip/address.hpp>
 #include <boost/asio/ip/host_name.hpp>
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>

 // local includes
 #include "misc.h"
@@ -199,7 +199,7 @@ namespace platf {
     boost::filesystem::path working_dir;
     std::string cmd = R"(open ")" + url + R"(")";

-    boost::process::v1::environment _env = boost::this_process::environment();
+    boost::process::environment _env = boost::this_process::environment();
     std::error_code ec;
     auto child = run_command(false, false, cmd, working_dir, _env, nullptr, ec, nullptr);
     if (ec) {
diff --git a/src/platform/windows/display_base.cpp b/src/platform/windows/display_base.cpp
index 2538a690..f899ccfa 100644
--- a/src/platform/windows/display_base.cpp
+++ b/src/platform/windows/display_base.cpp
@@ -11,10 +11,10 @@

 // lib includes
 #include <boost/algorithm/string/join.hpp>
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>
 #include <MinHook.h>

-// We have to include boost/process/v1.hpp before display.h due to WinSock.h,
+// We have to include boost/process.hpp before display.h due to WinSock.h,
 // but that prevents the definition of NTSTATUS so we must define it ourself.
 typedef long NTSTATUS;

diff --git a/src/platform/windows/misc.cpp b/src/platform/windows/misc.cpp
index a921c3cc..3e7ebe32 100644
--- a/src/platform/windows/misc.cpp
+++ b/src/platform/windows/misc.cpp
@@ -13,7 +13,7 @@
 // lib includes
 #include <boost/algorithm/string.hpp>
 #include <boost/asio/ip/address.hpp>
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>
 #include <boost/program_options/parsers.hpp>

 // prevent clang format from "optimizing" the header include order
@@ -1008,7 +1008,7 @@ namespace platf {
    * @param url The url to open.
    */
   void open_url(const std::string &url) {
-    boost::process::v1::environment _env = boost::this_process::environment();
+    boost::process::environment _env = boost::this_process::environment();
     auto working_dir = boost::filesystem::path();
     std::error_code ec;

diff --git a/src/process.cpp b/src/process.cpp
index fb123470..2cdb6c10 100644
--- a/src/process.cpp
+++ b/src/process.cpp
@@ -57,7 +57,7 @@ namespace proc {
     return std::make_unique<deinit_t>();
   }

-  void terminate_process_group(boost::process::v1::child &proc, boost::process::v1::group &group, std::chrono::seconds exit_timeout) {
+  void terminate_process_group(boost::process::child &proc, boost::process::group &group, std::chrono::seconds exit_timeout) {
     if (group.valid() && platf::process_group_running((std::uintptr_t) group.native_handle())) {
       if (exit_timeout.count() > 0) {
         // Request processes in the group to exit gracefully
@@ -95,7 +95,7 @@ namespace proc {
     }
   }

-  boost::filesystem::path find_working_directory(const std::string &cmd, boost::process::v1::environment &env) {
+  boost::filesystem::path find_working_directory(const std::string &cmd, boost::process::environment &env) {
     // Parse the raw command string into parts to get the actual command portion
 #ifdef _WIN32
     auto parts = boost::program_options::split_winmain(cmd);
@@ -117,7 +117,7 @@ namespace proc {
     // If the cmd path is not an absolute path, resolve it using our PATH variable
     boost::filesystem::path cmd_path(parts.at(0));
     if (!cmd_path.is_absolute()) {
-      cmd_path = boost::process::v1::search_path(parts.at(0));
+      cmd_path = boost::process::search_path(parts.at(0));
       if (cmd_path.empty()) {
         BOOST_LOG(error) << "Unable to find executable ["sv << parts.at(0) << "]. Is it in your PATH?"sv;
         return boost::filesystem::path();
@@ -300,8 +300,8 @@ namespace proc {
     std::error_code ec;
     placebo = false;
     terminate_process_group(_process, _process_group, _app.exit_timeout);
-    _process = boost::process::v1::child();
-    _process_group = boost::process::v1::group();
+    _process = boost::process::child();
+    _process_group = boost::process::group();

     for (; _app_prep_it != _app_prep_begin; --_app_prep_it) {
       auto &cmd = *(_app_prep_it - 1);
@@ -400,7 +400,7 @@ namespace proc {
     return begin;
   }

-  std::string parse_env_val(boost::process::v1::native_environment &env, const std::string_view &val_raw) {
+  std::string parse_env_val(boost::process::native_environment &env, const std::string_view &val_raw) {
     auto pos = std::begin(val_raw);
     auto dollar = std::find(pos, std::end(val_raw), '$');

diff --git a/src/process.h b/src/process.h
index f5a81e90..84d586de 100644
--- a/src/process.h
+++ b/src/process.h
@@ -13,7 +13,7 @@
 #include <unordered_map>

 // lib includes
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>

 // local includes
 #include "config.h"
@@ -72,7 +72,7 @@ namespace proc {
     KITTY_DEFAULT_CONSTR_MOVE_THROW(proc_t)

     proc_t(
-      boost::process::v1::environment &&env,
+      boost::process::environment &&env,
       std::vector<ctx_t> &&apps
     ):
         _app_id(0),
@@ -98,7 +98,7 @@ namespace proc {
   private:
     int _app_id;

-    boost::process::v1::environment _env;
+    boost::process::environment _env;
     std::vector<ctx_t> _apps;
     ctx_t _app;
     std::chrono::steady_clock::time_point _app_launch_time;
@@ -106,8 +106,8 @@ namespace proc {
     // If no command associated with _app_id, yet it's still running
     bool placebo {};

-    boost::process::v1::child _process;
-    boost::process::v1::group _process_group;
+    boost::process::child _process;
+    boost::process::group _process_group;

     file_t _pipe;
     std::vector<cmd_t>::const_iterator _app_prep_it;
@@ -136,7 +136,7 @@ namespace proc {
    * @param group The group of all children in the process tree.
    * @param exit_timeout The timeout to wait for the process group to gracefully exit.
    */
-  void terminate_process_group(boost::process::v1::child &proc, boost::process::v1::group &group, std::chrono::seconds exit_timeout);
+  void terminate_process_group(boost::process::child &proc, boost::process::group &group, std::chrono::seconds exit_timeout);

   extern proc_t proc;
 }  // namespace proc
diff --git a/src/system_tray.cpp b/src/system_tray.cpp
index 81248356..072a37c9 100644
--- a/src/system_tray.cpp
+++ b/src/system_tray.cpp
@@ -36,7 +36,7 @@

   // lib includes
   #include <boost/filesystem.hpp>
-  #include <boost/process/v1/environment.hpp>
+  #include <boost/process/environment.hpp>
   #include <tray/src/tray.h>

   // local includes
diff --git a/tests/integration/test_external_commands.cpp b/tests/integration/test_external_commands.cpp
index 92ec159e..c632f2a5 100644
--- a/tests/integration/test_external_commands.cpp
+++ b/tests/integration/test_external_commands.cpp
@@ -11,7 +11,7 @@
 #include <vector>

 // lib includes
-#include <boost/process/v1.hpp>
+#include <boost/process.hpp>

 // local includes
 #include "src/platform/common.h"
--
2.51.0
